# GitHub Deployment Rules for Fuel-Flux-Analytics

## Repository Information
- **Repository URL**: https://github.com/Moagi-TH/Fuel-Flux-Analytics.git
- **Main Branch**: main
- **Project Structure**: fuel-analytics-website subdirectory
- **Owner**: Moagi-TH

## Deployment Workflow Rules

### 1. Pre-Deployment Checklist
- [ ] All changes are tested locally
- [ ] No sensitive data (API keys, passwords) in code
- [ ] All files are properly saved
- [ ] No console errors in browser
- [ ] Database connections are working

### 2. Git Workflow
```bash
# Check current status
git status

# Stage all changes
git add .

# Create descriptive commit message
git commit -m "feat: [brief description of changes]"

# Push to main branch
git push origin main
```

### 3. File Organization Rules
- Keep all fuel analytics website files in the `fuel-analytics-website/` subdirectory
- Maintain proper directory structure:
  - `components/` - React components
  - `utils/` - Utility functions
  - `backend/` - Server-side code
  - `supabase/` - Database functions
  - Documentation files in root

### 4. Commit Message Convention
Use conventional commit format:
- `feat:` - New features
- `fix:` - Bug fixes
- `docs:` - Documentation changes
- `style:` - Code style changes
- `refactor:` - Code refactoring
- `test:` - Test additions/changes
- `chore:` - Maintenance tasks

### 5. Branch Strategy
- **main**: Production-ready code
- **develop**: Development branch (if needed)
- **feature/***: Feature branches for new development

### 6. Auto-Sync Configuration
The project includes auto-sync functionality:
- `auto-sync.js` - Monitors file changes
- `setup-auto-sync.sh` - Setup script
- Automatic commits and pushes on file changes

### 7. Security Guidelines
- Never commit `.env` files
- Use environment variables for sensitive data
- Keep API keys in Supabase dashboard
- Use `.gitignore` for sensitive files

### 8. Deployment Commands
```bash
# Quick deployment
./setup-auto-sync.sh

# Manual deployment
git add .
git commit -m "deploy: [description]"
git push origin main

# Check deployment status
git log --oneline -5
```

### 9. Error Handling
- If push fails, check authentication
- Use `gh auth login` for GitHub CLI
- Verify remote origin is correct
- Check for merge conflicts

### 10. Monitoring
- Monitor GitHub repository for successful pushes
- Check GitHub Actions if configured
- Review commit history regularly
- Monitor website functionality after deployment

## Quick Reference
- **Repository**: https://github.com/Moagi-TH/Fuel-Flux-Analytics.git
- **Auto-sync**: `node auto-sync.js`
- **Setup**: `./setup-auto-sync.sh`
- **Manual push**: `git push origin main`
description:
globs:
alwaysApply: true
---
